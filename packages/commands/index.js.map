{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import util = require(\"util\")\r\n\r\nimport { getLang, userString } from \"@amanda/shared-utils\"\r\nimport confprovider = require(\"@amanda/config\")\r\n\r\nimport type {\r\n\tAPIUser,\r\n\tAPIInteractionGuildMember,\r\n\tLocaleString,\r\n\tAPIChatInputApplicationCommandInteraction,\r\n\tAPIInteractionDataResolvedGuildMember,\r\n\tAPIRole,\r\n\tAPIInteractionDataResolvedChannel,\r\n\tAPIMessage,\r\n\tAPIAttachment,\r\n\tAPIChatInputApplicationCommandInteractionData,\r\n\tAPIApplicationCommandInteractionDataOption,\r\n\tAPIApplicationCommandInteractionDataBasicOption,\r\n\tAPIApplicationCommandInteractionDataSubcommandOption,\r\n\tAPIApplicationCommandInteractionDataSubcommandGroupOption,\r\n\tAPIApplicationCommandOption,\r\n\tAPIMessageComponentInteraction\r\n} from \"discord-api-types/v10\"\r\nimport type { SnowTransfer } from \"snowtransfer\"\r\n\r\nexport class ChatInputCommand<T extends APIChatInputApplicationCommandInteraction | APIMessageComponentInteraction = APIChatInputApplicationCommandInteraction> {\r\n\tpublic author: APIUser\r\n\tpublic member: APIInteractionGuildMember | null\r\n\tpublic guild_id: string | null\r\n\tpublic channel: APIChatInputApplicationCommandInteraction[\"channel\"]\r\n\tpublic locale: LocaleString\r\n\tpublic guild_locale: LocaleString | null\r\n\tpublic data: T extends APIChatInputApplicationCommandInteraction ? ChatInputCommandData : never\r\n\r\n\tpublic id: string\r\n\tpublic application_id: string\r\n\tpublic token: string\r\n\r\n\tpublic constructor(interaction: T) {\r\n\t\tthis.author = interaction.member?.user ?? interaction.user!\r\n\t\tthis.member = interaction.member ?? null\r\n\t\tthis.guild_id = interaction.guild_id ?? null\r\n\t\tthis.channel = interaction.channel\r\n\t\tthis.locale = interaction.locale\r\n\t\tthis.guild_locale = interaction.guild_locale ?? null\r\n\t\tif (interaction.type === 2) this.data = new ChatInputCommandData(interaction.data) as T extends APIChatInputApplicationCommandInteraction ? ChatInputCommandData : never\r\n\r\n\t\tthis.id = interaction.id\r\n\t\tthis.application_id = interaction.application_id\r\n\t\tthis.token = interaction.token\r\n\t}\r\n}\r\n\r\nexport class ChatInputCommandData {\r\n\tpublic users: Map<string, APIUser>\r\n\tpublic members: Map<string, APIInteractionDataResolvedGuildMember>\r\n\tpublic roles: Map<string, APIRole>\r\n\tpublic channels: Map<string, APIInteractionDataResolvedChannel>\r\n\tpublic messages: Map<string, APIMessage>\r\n\tpublic attachments: Map<string, APIAttachment>\r\n\r\n\tpublic options: Map<string, CommandOption>\r\n\r\n\tpublic constructor(data: APIChatInputApplicationCommandInteractionData) {\r\n\t\tthis.users = new Map(Object.entries(data.resolved?.users ?? {}))\r\n\t\tthis.members = new Map(Object.entries(data.resolved?.members ?? {}))\r\n\t\tthis.roles = new Map(Object.entries(data.resolved?.roles ?? {}))\r\n\t\tthis.channels = new Map(Object.entries(data.resolved?.channels ?? {}))\r\n\t\tthis.attachments = new Map(Object.entries(data.resolved?.attachments ?? {}))\r\n\r\n\t\tthis.options = new Map(data.options?.map(c => [c.name, new CommandOption(c)]) ?? [])\r\n\t}\r\n}\r\n\r\nexport class CommandOption {\r\n\tpublic options: Map<string, CommandOption>\r\n\tpublic value: unknown\r\n\r\n\tpublic constructor(data: APIApplicationCommandInteractionDataOption | APIApplicationCommandInteractionDataBasicOption) {\r\n\t\tthis.options = new Map(\r\n\t\t\t(data as APIApplicationCommandInteractionDataSubcommandOption)\r\n\t\t\t\t.options\r\n\t\t\t\t?.map(c => [c.name, new CommandOption(c)]))\r\n\r\n\t\tthis.value = (data as Exclude<\r\n\t\t\ttypeof data,\r\n\t\t\tAPIApplicationCommandInteractionDataSubcommandOption | APIApplicationCommandInteractionDataSubcommandGroupOption\r\n\t\t>).value ?? null\r\n\t}\r\n\r\n\tpublic asString(): string | null {\r\n\t\treturn this.value as string\r\n\t}\r\n\r\n\tpublic asNumber(): number | null {\r\n\t\treturn this.value as number\r\n\t}\r\n\r\n\tpublic asBoolean(): boolean | null {\r\n\t\treturn this.value as boolean\r\n\t}\r\n}\r\n\r\n\r\nexport class CommandManager<Params extends Array<unknown>> {\r\n\tpublic commands = new Map<string, Command<Params>>()\r\n\tpublic categories = new Map<string, Array<string>>()\r\n\r\n\tpublic constructor(\r\n\t\tpublic paramGetter: (command: APIChatInputApplicationCommandInteraction) => Params,\r\n\t\tpublic errorHandler?: (error: unknown) => unknown\r\n\t) { void 0 }\r\n\r\n\tpublic assign(properties: Array<Command<Params>>): void {\r\n\t\tproperties.forEach(i => {\r\n\t\t\tif (this.commands.get(i.name)) this.commands.delete(i.name)\r\n\t\t\tthis.commands.set(i.name, i)\r\n\t\t\tthis.categories.forEach(c => {\r\n\t\t\t\tif (c.includes(i.name)) c.splice(c.indexOf(i.name), 1)\r\n\t\t\t})\r\n\t\t\tconst cat = this.categories.get(i.category)\r\n\t\t\tif (!cat) this.categories.set(i.category, [i.name])\r\n\t\t\telse if (!cat.includes(i.name)) cat.push(i.name)\r\n\t\t})\r\n\t}\r\n\r\n\tpublic remove(commands: Array<string>): void {\r\n\t\tfor (const command of commands) {\r\n\t\t\tif (this.commands.get(command)) {\r\n\t\t\t\tthis.commands.delete(command)\r\n\t\t\t\tthis.categories.forEach(c => {\r\n\t\t\t\t\tif (c.includes(command)) c.splice(c.indexOf(command), 1)\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic handle(command: APIChatInputApplicationCommandInteraction, snow?: SnowTransfer): boolean {\r\n\t\tif (!this.commands.has(command.data?.name)) return false\r\n\r\n\t\tsetImmediate(async () => {\r\n\t\t\tconst params = this.paramGetter(command)\r\n\t\t\tlet returnValue: unknown\r\n\t\t\ttry {\r\n\t\t\t\tawait snow?.interaction.createInteractionResponse(command.id, command.token, { type: 5 })\r\n\t\t\t\treturnValue = this.commands.get(command.data.name)!.process(...params)\r\n\t\t\t} catch (e) {\r\n\t\t\t\tif (snow) {\r\n\t\t\t\t\tconst userLang = getLang(command.locale)\r\n\t\t\t\t\tsnow.interaction.createFollowupMessage(command.application_id, command.token, { content: userLang.GLOBAL.COMMAND_ERROR }).catch(() => void 0)\r\n\t\t\t\t\tif (confprovider.config.error_log_channel_id?.length) {\r\n\t\t\t\t\t\tconst user = (command.member?.user ?? command.user!)\r\n\r\n\t\t\t\t\t\tconst undef = \"undefined\"\r\n\t\t\t\t\t\tconst details = [\r\n\t\t\t\t\t\t\t[\"Tree\", confprovider.config.cluster_id],\r\n\t\t\t\t\t\t\t[\"Guild ID\", command.guild_id ?? undef],\r\n\t\t\t\t\t\t\t[\"Text Channel\", `${command.channel.name ?? undef} (${command.channel.id})`],\r\n\t\t\t\t\t\t\t[\"User ID\", user.id],\r\n\t\t\t\t\t\t\t[\"User Tag\", userString(user)]\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t\tconst maxLength = details.reduce((p, c) => Math.max(p, c[0].length), 0)\r\n\t\t\t\t\t\tconst detailsString = details.map(row =>\r\n\t\t\t\t\t\t\t`\\`${row[0]}${\" â€‹\".repeat(maxLength - row?.[0].length)}\\` ${row[1]}` // SC: space + zwsp, wide space\r\n\t\t\t\t\t\t).join(\"\\n\")\r\n\r\n\t\t\t\t\t\tsnow.channel.createMessage(confprovider.config.error_log_channel_id, {\r\n\t\t\t\t\t\t\tembeds: [\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tcolor: 0xdd2d2d,\r\n\t\t\t\t\t\t\t\t\ttitle: \"Command error occurred.\",\r\n\t\t\t\t\t\t\t\t\tfields: [\r\n\t\t\t\t\t\t\t\t\t\t{ name: \"Details\", value: detailsString },\r\n\t\t\t\t\t\t\t\t\t\t{ name: \"Exception\", value: util.inspect(e, false, 5, false) }\r\n\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.errorHandler?.(e)\r\n\t\t\t}\r\n\t\t\tif (returnValue instanceof Promise) returnValue.catch(reason => this.errorHandler?.(reason))\r\n\t\t})\r\n\r\n\t\treturn true\r\n\t}\r\n}\r\n\r\nexport type Command<Params extends Array<unknown>> = {\r\n\tname: string;\r\n\tintegration_types?: Array<number>;\r\n\tcontexts?: Array<number>;\r\n\toptions?: Array<APIApplicationCommandOption>;\r\n\tdescription: string;\r\n\tcategory: string;\r\n\texamples?: Array<string>;\r\n\torder?: number;\r\n\tprocess(...args: Params): unknown;\r\n}\r\n"],"mappings":"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","names":["src_exports","__export","ChatInputCommand","ChatInputCommandData","CommandManager","CommandOption","__toCommonJS","import_shared_utils","util","confprovider","ChatInputCommand","__name","interaction","ChatInputCommandData","data","c","CommandOption","_CommandOption","CommandManager","paramGetter","errorHandler","properties","i","cat","commands","command","snow","params","returnValue","e","userLang","user","undef","details","maxLength","p","detailsString","row","reason"]}